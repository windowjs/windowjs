name: Windows build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'examples/**'
      - 'tests/**'
      - 'types/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'examples/**'
      - 'tests/**'
      - 'types/**'
  release:
    types: [published]

  # Allows running this workflow manually from the Actions tab.
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Prevent newline conversions on Windows checkouts.
      - name: Git config
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install packages
        run: choco install upx

      - name: Cache
        id: cache-libraries
        uses: actions/cache@v2
        with:
          path: |
            libraries/depot_tools
            libraries/gn
            libraries/glad
            libraries/glfw
            libraries/skia
            libraries/v8
            libraries/libuv
          key: ${{ runner.os }}-build-cache-${{ hashFiles('.gclient', 'libraries/build_skia.bat', 'libraries/skia-args-windows.gn', 'libraries/build_v8.bat', 'libraries/v8-args-windows.gn') }}

      - name: Sync
        if: steps.cache-libraries.outputs.cache-hit != 'true'
        run: |
          libraries/setup_build_env.ps1
          libraries/sync.ps1

      - name: Build Skia
        if: steps.cache-libraries.outputs.cache-hit != 'true'
        run: |
          libraries/setup_build_env.ps1
          libraries/build_skia.bat

      - name: Build v8
        if: steps.cache-libraries.outputs.cache-hit != 'true'
        run: |
          libraries/setup_build_env.ps1
          libraries/build_v8.bat

      - name: Release build
        run: |
          libraries/setup_build_env.ps1
          # Note: not passing LLVM_DIR; this config builds with MSVC.
          cmake -S. -B out -DCMAKE_BUILD_TYPE=Release -G Ninja
          cmake --build out -t windowjs -t windowjs-p5

#      - name: Debug build
#        run: |
#          libraries/setup_build_env.ps1
#          # Note: not passing LLVM_DIR; this config builds with MSVC.
#          cmake -S. -B out-debug -DCMAKE_BUILD_TYPE=Debug -G Ninja
#          cmake --build out-debug -t windowjs -t windowjs-p5
#
#      - name: Tests
#        run: |
#          # Note: run tests in Debug to have more assertions.
#          # Note: run tests in Debug on Windows because Release builds
#          # don't have a console, and so their exit code is always 0;
#          # that would prevent test failures from making the workflow fail.
#          out-debug/src/windowjs.exe tests/run_tests.js

      - name: Binary size
        run: |
          Write-Host "Size after build:"
          Write-Host((Get-Item out/src/windowjs.exe).length)
          upx -9 out/src/windowjs.exe
          Write-Host "Size after upx:"
          Write-Host((Get-Item out/src/windowjs.exe).length)

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windowjs.exe
          path: |
            out/src/windowjs.exe
            out/src/windowjs-p5.exe
